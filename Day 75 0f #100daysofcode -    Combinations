PROBLEM 1 : Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.

CODE : 

class Solution {
    void solve(vector<vector<int>>&ans , vector<int>output ,int index , int n , int k){
        // base case

        if(k == 0){                      // when i chooden all the elements then the value of k becomes 0 that means now i                            can stop there no need to go further because i don't need the subset greater than the size of k
            ans.push_back(output);
            return;
        }
        if(k > n-index+1)return;    // 2nd optimal case  - > if(required numbers > remaining numbers) -> then i am not able to make the subset of length k so no need to go in this way furthrer 
       
        if(index > n) return ;

        //include call
        output.push_back(index);
        solve(ans , output , index+1 ,n ,k-1); // here k-1 because i have already chooden the 1 element now i have only to choose k-1 element
        output.pop_back();
        //exclude call 
        solve(ans , output , index+1 , n , k); 
    }
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>>ans;
        vector<int>output;
        int index =1;
        solve(ans , output , index , n ,  k);
        return ans;
    }
};
