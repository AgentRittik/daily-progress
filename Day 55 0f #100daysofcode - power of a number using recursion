PROBLEM 1 : You have given a numbwr and the power as a input and you have to find the power of number using recursion.

Code :

#include<iostream>
using namespace std;

int myPower(int b , int p){
    //base case 
    if(p==0){
        return 1;
    }
    if(p==1){
        return b;
    }
    int ans  = myPower(b, p/2);
    if(p%2 == 0){
        return ans*ans;
    }
    else{
        return b*ans*ans;
    }
}

int main(){
    int base; 
    int power;
    cout<<"enter the base no. = ";
    cin>>base;
    cout<<endl<<"enter the power = ";
    cin>>power;
    cout<<endl;
    int ans  = myPower(base ,power);
    cout<<"answer = "<<ans<<endl;

}

Problem 2 : 
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

EXPLANATION : I solve this question using binary search.

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4


CODE : 

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int s = 0;
        int e = nums.size()-1;
        int mid = s+(e-s)/2;
        while(s<=e){
            if(nums[mid] == target){
                return mid;
            }
            if(nums[mid] < target){
                s =mid+1;
            }
            if(nums[mid]> target){
                e = mid-1;
            }
            mid = s+(e-s)/2;
        }
        return s;
    }
};
