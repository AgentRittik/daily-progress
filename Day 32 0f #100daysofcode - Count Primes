PROBLEM : Given an integer n, return the number of prime numbers that are strictly less than n.

EXPLANATION : I  Solve this question using "SIEVE OF ERATOSTHENES" method ---> is a method to find the prime numbers and composite numbers among a group of numbers.
              Step 1: First, write all the natural numbers from 1 to n , row-wise and column-wise,
              Step 2: Put a cross over 1, as it is neither a prime number nor a composite.
              Step 3: Now, encircle the number 2 (which is a prime number) and cross all the multiples of 2, such as 4,6,8,10,12, and so on. Since all the multiples of 2 are composite.
              Step 4: Next, encircle the number 3, and put a cross over all the multiples of 3, such as 6,9,15,21, etc. Since apart from 3, all its multiples are composite.
              Step 5: Again, encircle the number 5 (since it has only two factors), and put a cross over all the multiples of 5.
              Step 6: Now encircle 7 and cross all the multiples of 7
              Step 7: Encircle 11 and cross all the multiples of 11
              Step 8: Continue the process unless all the numbers are either encircled or crossed.


Example 1:

Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
Example 2:

Input: n = 0
Output: 0





CODE : (BRUTEFORCE  - Time limit exceed) 

class Solution {

bool isPrime(int n){
    if(n==1){
        return false ; 
    }
    for(int i = 2; i<n; i++){
        if(n%i == 0){
            return false;
        }
    }
    return true;
}

public:
    int countPrimes(int n) {
        int count = 0;

        for(int i =2; i<n;i++){
            if(isPrime(i)){
                count++;
            }
        }
        return count;
    }
};


CODE : (final solution )

class Solution {
public:
    int countPrimes(int n) {
        vector<bool>prime(n+1,true);
        prime[0]= prime[1]= false;
        int count = 0;

        for(int i =2; i<n ; i++){
            if(prime[i]){
                count++;
                for(int j = 2*i ; j<n; j = j+i){
                    prime[j]= false;
                }
            }

        }
        return count ;
    }
};
