Problem Statement : you have given a sorted array/list ARR consisting od 'N' elements . you are also given 
                    an integer 'K' .  now the array is rotated at some pivot point unknown to you .
                    Now your task is to find the index at which 'K'is present in ARR.
                    
EXPLANATION :      we have given a sorted rotated array . so it means that we can find the pivot element and then we can split that array into 2 sorted array .
                   After that we compare the pivot element with k 
                   if (arr[pivot] < = k < = arr[n-1])   --> than that means we have our element k between arr[pivot] and arr[n-1]. so we take start  = pivot and end = n-1 
                   and the apply binary search on this . if we found the element then we return index of element otherwise we return -1; 
                    
                   if (arr[0] < = k <= arr[pivot-1]) --> than that means we have our element k between arr[0] and arr[pivot-1]. so we take (start  = 0) and (end = pivot-1) 
                   and the apply binary search on this . if we found the element then we return index of element otherwise we return -1; 
                    
INPUT : N =4 ,K = 3
        8 9 4 5
OUTPUT : -1 

INPUT: N =7, K=  2
       2 4 5 6 8 9 1  
       
OUTPUT: 0 
                    
                    

CODE : (FROM CODE STUDIO) // IF YOU COPY THIS CODE THEN ON VS CODE THEN IT WILL NOT RUN BECAUSE IT IS DIRECLTY WRITTEN ON THE CODESTUDIO . SO THERE WE DONT HAVE TO WRITE THE CODE
                             TO TAKE INPUT .
                             
                             BELOW I ALSO PUT THE CODE THAT I WRITTEN ON THE VS CODE YOU YOU CAN DIRECTLY COPY IT ON ANY CODE EDITOR IF ANYONE WANTS TO CHECK

#include <bits/stdc++.h> 
#include<iostream>
using namespace std;

int pivotElement(vector<int>& arr, int n ){
    int s= 0;
    int e = n-1;
    int mid = s +(e-s)/2;

    while (s<e){
        
        if (arr[mid] >= arr[0]){
            s = mid+1;
        }
        else {
            e =mid;
        }
        mid = s +(e-s)/2;
    }
    
    return s;
}
int searchElement(vector<int>& arr ,int n, int k,int pv ){
    if (arr[pv]<= k && k<= arr[n-1]){
        int s = pv;
        int e = n-1;
        int mid = s +(e-s)/2;
    while (s<=e){
        if(arr[mid]==k){
            return mid;
        }
        else if (arr[mid]>k){
            e = mid-1;
        }
        else if (arr[mid]<k){
            s = mid + 1;
        }
        mid = s +(e-s)/2;
    }
        return -1;
    }
    else{
        int s = 0 ; 
        int e = pv-1;
         int mid = s +(e-s)/2;
    while (s<=e){
        if(arr[mid]==k){
            return mid;
        }
        else if (arr[mid]>k){
            e = mid-1;
        }
        else if (arr[mid]<k){
            s = mid + 1;
        }
        mid = s +(e-s)/2;
    }
        return -1;
    }
}
int findPosition(vector<int>& arr, int n, int k)
{
   int PV = pivotElement(arr , n);
    searchElement(arr,n,k,PV);
    
    
    // Write your code here.
    // Return the position of K in ARR else return -1.
}







CODE : (VS CODE)

#include <bits/stdc++.h> 
#include<iostream>
using namespace std;

int pivotElement(vector<int>& arr, int n ){
    int s= 0;
    int e = n-1;
    int mid = s +(e-s)/2;

    while (s<e){
        
        if (arr[mid] >= arr[0]){
            s = mid+1;
        }
        else {
            e =mid;
        }
        mid = s +(e-s)/2;
    }
    
    return s;
}
int searchElement(vector<int>& arr ,int n, int k,int pv ){
    if (arr[pv]<= k && k<= arr[n-1]){
        int s = pv;
        int e = n-1;
        int mid = s +(e-s)/2;
    while (s<=e){
        if(arr[mid]==k){
            return mid;
        }
        else if (arr[mid]>k){
            e = mid-1;
        }
        else if (arr[mid]<k){
            s = mid + 1;
        }
        mid = s +(e-s)/2;
    }
        return -1;
    }
    else{
        int s = 0 ; 
        int e = pv-1;
         int mid = s +(e-s)/2;
    while (s<=e){
        if(arr[mid]==k){
            return mid;
        }
        else if (arr[mid]>k){
            e = mid-1;
        }
        else if (arr[mid]<k){
            s = mid + 1;
        }
        mid = s +(e-s)/2;
    }
        return -1;
    }
}
int findPosition(vector<int>& arr, int n, int k)
{
   int PV = pivotElement(arr , n);
    int y = searchElement(arr,n,k,PV);
    return y ;
    
    
    // Write your code here.
    // Return the position of K in ARR else return -1.
}

int main (){
     vector<int> arr;
     arr.push_back(7); 
     arr.push_back(9);
     arr.push_back(1);
     arr.push_back(2);
     arr.push_back(3);   
     int n  = arr.size();
    cout <<"the element is found at index "<< findPosition(arr , n , 2) <<endl;                                                              
}


