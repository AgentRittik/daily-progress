PROBLEM 1 : Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).
            Return the running sum of nums.

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]


CODE : 

class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        vector<int>ans;
        for(int i=0; i<nums.size(); i++){
            int sum = 0 ;
            for(int j =0 ; j<=i;j++){
                sum = sum+nums[j];
            }
            ans.push_back(sum);
        }
        return ans;
    }
};


PROBLEM 2 : Write a code to find the sum of elements of array arr using recursion.


#include<iostream>
using namespace std;

int sum(int arr[], int size){
    //base case 
    if(size == 0)
    return 0;
    if(size == 1)
    return arr[0];

    int ans = arr[0] + sum(arr+1 , size-1);
    return ans;
}


int main(){
    int arr[] = {100, 200,300,400};
    int size = sizeof(arr)/sizeof(arr[0]);
    int ans  = sum(arr, size);
    cout<<ans;
}










