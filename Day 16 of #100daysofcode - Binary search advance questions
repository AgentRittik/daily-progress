PROBLEM : Given an array 'arr' of integrer numbers . Where 'arr[i]' represents the number of pages in the 'i-th book.
          There are 'm' numbers of students and the task is to allocate all the books to their students . Allocate 
          books in such a way that : 
          
          1. Each student gets atleast one book .
          2. Each book should be allocated to student .
          3.Book allocation should be in contiguous manner.
          
          you have to allocate the book to 'm' students such that the maximum numbers of pages assigned to a student
          is minimum . 
          
          
EXPLANATION : I solve this question by using binary search .  First of all I find the search space of the 
             question and the then in each iteration I narrow down the search space by applying some conditions 
          
          bookAllocation -> int this method we have taken a two variable (s, e) s-> represents the 1st 1 element of possible search space .
                            and e-> represents the last element . in this method we internally called isPrime function 
          if(isPossible(n,m,arr,mid) -> 
                                        true then we store the value of mid in ans (because after storing the and we know that if the allocation is possible 
             for mid the it also be possible for the values greater than mid . so we perform e =mid -1.  but after doing this if we didn,t find the ans in the left
            side search space than that means the mid that we store is the ans . in case if we didn,t store that mid then we don,t be able to find the answer)
            
            else -> 
                    we move our start to s= mid +1 (because if we not able to allocate n books to m student at current mid then taht means we also not able top allocate 
                    books to values smaller than mid )
                    
            isPossible ->
                          this  function has 2 variables count =1 and pageSum = 0 . in this we are using a for loop to traverse the array . inside loo we put the conditions
                         if(pageSum + arr[i] <= mid) -> if this condition get true then we chage pageSum to pageSum + arr [i] . 
                         
                         else -> we increase the count (because we allocated the book to 1st student and now we have to allocate books to 2nd student )
                         
        
                    
       
          
          
CODE : 

#include <bits/stdc++.h> 
using namespace std;

bool isPossible(int n, int m, int arr[], int mid){  
    int count = 1;
    int pageSum = 0;
    for(int i = 0 ; i<n;i++){
        if(pageSum + arr[i] <= mid){      // did the mistake here it will always be pageSum + arr[i] but i was only taking pageSum -> due to this the loop will run for 
                                          // 1 extra time and this will leads to pagesum greater than the actual result 
            pageSum+= arr[i];
        }
        else{
            count++;
            if(count> m || arr[i]>mid){
                return false;
            }
            else{
                pageSum = arr[i];
            }
        }
    }
    return true;
}


long long bookAllocation(int n, int m, int arr[]) 
{	

    int ans= -1;
    int s= 0;
    int sum =0;
    for(int i = 0 ; i<n; i++){
        sum+=arr[i];
    }
    int e = sum;
    int mid  = s+ (e-s)/2;
    while(s<=e){
        if(isPossible(n,m,arr,mid)){
           ans = mid; 
            e = mid-1;
        }
        else {
            s = mid+1;
        }
        mid = s + (e-s)/2;
    }
    return ans;
}

int main(){

    int n , m ;
    cout<<"enter the no. of students  = "<<endl;
    cin>>m;
    cout<<"enter the no.  of books  = "<<endl;
    cin>>n;
    int arr[n];
    for(int i = 0; i<n;i++){
        int y = i;
        cout<<"enter the no. pages of the "<<++y<<" book = "<<endl;
        cin>>arr[i];
    }

    cout<<"answer = "<<bookAllocation(n,m,arr)<<endl;

    return 0;



}
          
          
