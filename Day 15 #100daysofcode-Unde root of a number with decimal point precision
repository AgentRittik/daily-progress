PROBLEM - Given a number 'N' and precision 'p' as input and you have to find the underroot of the number to a entered precision. 


INPUT : N =37 ,P =3
OUTPUT :  6.082

INPUT: N =144 , P =5
OUTPUT: 12

INPUT: N =97 , P =10
OUTPUT:  9.84886


CODE : 
#include <iostream>
#include<math.h>
using namespace std;

int SqrtInteger(int n){
    int s = 1;
    int e = n;
    int ans ;
    long long int mid = s+(e-s)/2;
    while(s<=e){
        if (mid*mid == n ){
            return mid;
        }
        else if (mid*mid >n){
           e = mid -1;
        }
        else if (mid*mid<n){
            ans  = mid;
            s = mid+1;

        }
        mid = s+(e-s)/2;
    }
    return ans ;
    

}

double sqrtFloat(int n ,int x){
    int precision;
    cout<<endl<<"enter upto how much precision you want after decimal = ";
    cin>>precision;
    double ans = x;
    double factor =1;
    for(int i =1; i<=precision;i++){
        factor = factor/10;
        for(double j = ans; j*j<=n; j = j+factor){
            ans = j;
        }
    }
    return ans;
}

int main(){
    int n;
    cout<<"enter the number = "; 
    cin>>n;
    int x = SqrtInteger(n);
    cout<<"root of number = "<<sqrtFloat(n ,x);

    return 0;

}
