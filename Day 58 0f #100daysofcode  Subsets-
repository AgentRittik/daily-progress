PROBLEM 1 : Given an integer array nums of unique elements, return all possible 
            subset  (the power set).
            The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]


EXPLANATION : I solve this question using recursion . in this program created a vectors of vectors "ans" to store the answer and index =0 (the index is used to iterate over the given input ) ,
              then i also create a vector "output" (initially it will we empty but when in recursion base case reaches then we can it 1 subset of the given input at a time )
              
              -->> To find the substring i created a function solve 
              -->> base case -> if(index>=nums.size()) -> in this case we push_back the output to a particular inndex of ans vector
              -->> exclude call -> in exclude call we pass the output vector as it is and increase the index
              -->> Include call -> in this call first we added the nums[index] element in the output vector then do the recursive call with updated output and index+1
          
CODE : 
 
 class Solution {
    void solve(vector<int>& nums , int index ,vector<int> output, vector<vector<int>> &ans){
        //base case 
        if(index>=nums.size()){
            ans.push_back(output);
            return;
        }
        // exclude call
        solve(nums , index+1 , output , ans);
        //include call
        output.push_back(nums[index]);
        solve(nums , index+1 , output , ans);
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> output;
        int index = 0;
        solve(nums , index , output , ans);
        return ans;

    }
};
