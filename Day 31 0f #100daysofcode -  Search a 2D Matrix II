PROBLEM :  Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

           Integers in each row are sorted in ascending from left to right.
           Integers in each column are sorted in ascending from top to bottom.
 
 EXPLANATION : I solve this question using binary search . but its not the usual case of binary search becauuse here if we convert this 2D array --> to 1-D array then it 
               is not sorted and we can apply binary search only to sorted array .  so here the binary search is applied by analygizing 2 conditions given in question . 
               -->> Integers in each row are sorted in ascending from left to right.
               -->> Integers in each column are sorted in ascending from top to bottom.
               
               1. so i started from the element at [0th row and last column] and check 3 conditions 
                -->> if the element == target then return 1;
                -->> if(matrix[row][col]>target) -->  if this is true then that means the element is not present in that col ->> col-- .
                -->> if(matrix[row][col] < target) --> that means that the element is present in same col or next columns but we eleminate next columns (because we started from the last col and come backward towards 
                                                       that particular column) . so now if element < target means now we have to move to next roe .  row->> row++
                                                       
                2. we repeatdly do above steps until (row <m && col>= 0)--> results to true
               
           
 
 
 Input: matrix = [[1,4,7,11,15],
                  [2,5,8,12,19],
                  [3,6,9,16,22],
                 '[10,13,14,17,24],
                 [18,21,23,26,30]], target = 5
 
Output: true


Input: matrix = [[1,4,7,11,15],
                [2,5,8,12,19],
                [3,6,9,16,22],
                [10,13,14,17,24],
                [18,21,23,26,30]], target = 20
                
Output: false

CODE : 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();

        int row = 0;
        int col = n-1;       
        while(row < m && col>= 0){ // don't put the = condition with row< m  . index out of bound .
            if(matrix[row][col] == target){
                return 1;
            }
            if(matrix[row][col] > target){
                col--;
            }
            else{
                row++;
            }
        }
        return 0;

    }
};
