PROBLEM 1 : You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10

CODE : 
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int low = 0, high = nums.size()-2; 
        
        while(low <= high){
            
            int mid = low + (high-low)/2;
            
			// If we are on left side, move right
            if(nums[mid] == nums[mid^1]) low = mid+1;
			// if we are on right side, move left
            else high = mid-1;
        }
        
        return nums[low];
    }
};

// mid^1 explanation:
// If mid is odd then (mid^1) will always be the even number before mid
// If mid is even then (mid^1) will always be the odd number after mid

// And hence I am able to check whether mid is in left half or right half as:

// Suppose mid is odd: then mid^1 will give even number before it, 
// then if nums[mid] == nums[mid^1] 
// then 1st instance at even (mid^1) and 2nd instance at odd (mid), 
// hence we are on left side otherwise we are on right side.

// Suppose mid is even: then mid^1 will give odd number after it, 
// then if nums[mid] == nums[mid^1]
// then 1st instance at even (mid) and 2nd instance at odd (mid^1), 
// hence we are on left side otherwise we are on right side
