PROBLEM 1 : Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.


Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).


CODE :


class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int k= 0;
        for(int i = 0; i<nums.size(); i++){
            if(nums[i] != val){
                nums[k]=nums[i];
                k++;
            }
        }
        return k;
    }
};



LINKED LIST IMPLEMENTATION : 


#include<iostream>
using namespace std;


class Node{
    public:
    int data;
    Node* next;

    //constructor
    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }

    //writing a destructor
    ~Node(){
        int value = this -> data;
        if(this->next != NULL){
            delete next;
            this->next = NULL;
        }
        cout<<" memory is free for node with data "<< value <<endl;
    }
};

void InsertAtHead (Node* &head , int d){

    //creating a new node
    Node* temp = new Node(d);
    temp -> next = head;
    head = temp;
}
//inserting node at the end

void InsertAtTail(Node* &tail , int d){ // we have to pass by reference 
    
    //creating a node 
    Node* temp = new Node(d);
    tail->next = temp;
    tail  = temp;
}

// insert at a particular position

void InsertAtPosition(int position , int d, Node* &head , Node* &tail){

    // if we are inserting at 1st position
    if(position == 1){
        InsertAtHead(head , d);
        return;
    }

    Node* temp = head;
    Node* ptr = new Node(d);
    for(int i = 1 ; i<position-1 ; i++){
        temp = temp->next;
    }

    // if position is the last node then 
    if(temp -> next == NULL){
        InsertAtTail(tail ,d);
        return;
    }
    ptr -> next = temp -> next;
    temp -> next = ptr;
}

// deleting the node with the help of position 

void deletePosition(int position , Node* &head){

    if(position == 1){
        Node* temp = head ;
        head = head->next;
         //memory free start node
         temp->next = NULL;
         delete temp;
    }
    else{
        //deleting any middle or last node
        Node* curr = head;
        Node* prev = NULL;
        int cnt = 1;
        while(cnt < position){
            prev = curr;
            curr = curr->next;
            cnt++;
        }
        prev->next = curr -> next;
        curr->next = NULL;
        delete curr;
    }
    
}
// printing a node
void print(Node* &head){
    Node* temp = head;
    
    while(temp!=NULL){
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }
    cout<<endl;
}

int main(){
   Node* node1 = new Node(10);
   //cout<< node1 -> data <<endl;
   //cout<<node1 -> next <<endl;

   //creating a head pointer node1 
   Node* head = node1;
   Node* tail = node1;
   print(head);

   //InsertAtHead(head , 5);
    InsertAtTail(tail, 5);

   print(head);

   //InsertAtHead(head, 2);
    InsertAtTail(tail, 2);

   print(head);

   // insertig at 3 rd position
   InsertAtPosition(3 , 66 , head ,tail);
   print (head);

   InsertAtPosition(5 , 90 , head ,tail);
   print (head);

   InsertAtPosition(1 , 1 , head ,tail);
   print (head);


   cout<<"head : "<<head -> data<<endl;
   cout<<"tail : "<<tail -> data<<endl;

   deletePosition(4,head);
   print(head);

   //if deleting last node how to handle tail

   cout<<"head : "<<head -> data<<endl;
   cout<<"tail : "<<tail -> data<<endl;



   return 0;
}
