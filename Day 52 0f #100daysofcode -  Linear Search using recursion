PROBLEM 1 : Linear Search using recursion

CODE : 

#include<iostream>
using namespace std;

bool linearSearch(int arr[], int size , int k){
    // base case 
    if (size == 0)
    return false;

    if(arr[0]==k){
        return true;
    }
    else{
        linearSearch(arr+1 , size-1, k);
    }
}

int main(){
    int arr[] = {1,2,3,4,5,6};
    int key = 6;
    int size = sizeof(arr)/sizeof(arr[0]);
    bool ans = linearSearch(arr, size ,key);
    if(ans)
    cout<<"number is present in array";
    else
    cout<<"number is not present";
    return 0;
}

PROBLEM 2 : Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

CODE: 
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int>ans; 
        for(int i = 0; i<nums.size(); i++){
            ans.push_back(nums[i]*nums[i]);
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};
 
