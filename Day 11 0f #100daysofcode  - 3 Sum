PROBLEM 1 : You are given an array/list ARR consisting of N integers. Your task is to find all the distinct triplets present in the
array which adds up to a given number K. An array is said to have a triplet {ARR[i], ARR[j], ARR[k]} with sum = 'K' if there
exists three indices i, j and k such that i!=j, j!=k and i!=j and ARR[i] + ARR[j] + ARR[k] = 'K'.


INPUT  :enetr n = 6
        enter array element  = 1 2 3 1 2 3
         enter sum you needed = 6

OUTPUT : 
1 2 3
1 2 3
1 3 2
1 2 3
2 3 1
2 1 3
3 1 2
1 2 3


PROBLEM Remained  : if it find the same triplet again then it will print that triplet no. of time it finds that triplet .


CODE  :

# include <iostream>
using namespace std;


int main(){
    int n ; 
    cout<<"enetr n = ";
    cin>>n;
    cout<<endl;
    int arr[n];
    cout<<"enter array element  = ";
    for(int i = 0; i<n; i++){
        cin>> arr[i];
    }
cout<<endl;
int k ;
cout<<"enter sum you needed = ";
cin>> k ;
 cout<<endl;

 for(int i= 0;i<n-2 ;i++){
        for(int j=i+1 ; j<n-1 ; j++){
            for (int z= j+1; z< n ; z++){
                if((arr[i]+arr[j]+arr[z]) == k){

                    cout<< arr[i]<<" "<< arr[j]<<" "<<arr[z];
                    cout<< endl ; 
                
                }
            }
        }
 }        

return 0 ;

}



